--2020.05.19
5장
--1
desc emp

--2
SELECT * FROM  emp;

--3 jones의 정보만 열람 
SELECT * 
FROM emp
where ENAME='JONES';

--4 부서번호 30
SELECT * 
FROM emp
where DEPTNO = 30;

--5 부서 번호가 30이 아닌 것 
SELECT * 
FROM emp
where DEPTNO != 30; --'!=,<>,^=' == 같지않다

--5 번외
SELECT * 
FROM emp
where NOT DEPTNO = 30; -- 같지않다

-- 5 번외 : 30이 아닌걸 찾아라 
SELECT * 
FROM emp
where  DEPTNO NOT IN (30);

--6 부서번호 30이고 JOB SALESMAN
SELECT * 
FROM emp
where DEPTNO=30 AND JOB ='SALESMAN'; --문자열은 ''안에 넣는다

--7 30번이거나 CLERK인 사람 
SELECT * 
FROM emp
where DEPTNO=30 OR UPPER(JOB) = UPPER('CLERK'); 
  --upper: ()안의 문자열을 대문자로 바꿔주는 용도

--8 봉급이 3000인 사람 찾기
SELECT * 
FROM emp
where SAL = 3000;

--9 연봉이 360000인 사람 찾기
SELECT * 
FROM emp
where SAL=36000/12; --or SAL*12=36000

--10 봉급이 3000이상인 사람
SELECT * 
FROM emp
where SAL>=3000;

--11 이름이 FORD인 사람
SELECT * 
FROM emp
where ENAME = 'FORD';

--12 이름이 F 이상인 사람
SELECT * 
FROM emp
where ENAME >='F';

--13 이름이 F로 시작하는 사람
SELECT * 
FROM emp
where ENAME LIKE 'F%';
  -- % == Zero or More: 이콜 사용을 못한다
  -- 그렇기 때문에 ~와 같은의 뜻인 LIKE 사용

--14 이름이 FORZ 이전인 사람
SELECT * 
FROM emp
where ENAME <='FORZ';

--15 JOB 'MANAGER','CLERK','SALESMAN'인 사람 <IN사용>
SELECT * 
FROM emp
where JOB IN('MANAGER','CLERK','SALESMAN');

-- 16 15 <OR사용>
SELECT * 
FROM emp
where JOB = 'MANAGER' OR
      JOB = 'CLERK' OR 
      JOB = 'SALESMAN';

--17 15대상이 아닌 사람
SELECT * 
FROM emp
where NOT(JOB = 'MANAGER' OR 
          JOB = 'CLERK' OR 
          JOB = 'SALESMAN';)

--18 15대상이 아닌 사람<IN 이용>
SELECT * 
FROM emp
where JOB NOT IN('MANAGER','CLERK','SALESMAN'); -- NOT은 JOB 앞으로 갈 수 있다

--샐러리 입력 
insert into emp(empno, ename, sal) values(9999,'a',60000);
-- insert into emp(empno, ename, sal) values(9997,'b',600000); 입력 오류 

--19 봉급이 2000에서 3000사이
SELECT * 
FROM emp
where SAL >=2000 AND
      SAL <=3000;

--20 19 다른 버전
SELECT * 
FROM emp
where SAL  BETWEEN 2000 AND 3000; -- 주어(SAL) 생략하면 안됨 
  -- NOT을 쓸 경우 WHERE 앞이나 BTWEEN 앞에 작성해준다

--21 이름이 S로 시작하는 사람
SELECT * 
FROM emp
where ENAME LIKE 'S%';

--22 이름에 AM이 든 사람
SELECT * 
FROM emp
where ENAME LIKE '%AM%';

--23 연봉: 봉급12달 + 보너스(COMM)
SELECT ENAME, SAL, COMM, SAL*12+NVL(COMM,0) 
FROM EMP;
  -- NVL(??,0) == ?? 값이 NULL 일때 0으로 바꿔줘라
  
--24 보너스 모르는 사람 찾기 (COMM:NULL)
SELECT * FROM EMP
WHERE COMM IS NULL;

--25 보너스 아는 사람 찾기
SELECT * FROM EMP
WHERE COMM IS NOT NULL;

--26 급여가 NULL보다 크고 COMM이 NULL인 사람 : 값이 나오지 않음
SELECT * FROM EMP
WHERE SAL > NULL AND COMM IS NULL;

--27 급여가 NULL이거나 COMM이 NULL인 사람
SELECT * FROM EMP
WHERE SAL < NULL AND COMM IS NULL;

--28 부서번호가 10번, 20번인 사람
SELECT * FROM EMP
WHERE DEPTNO in(10,20);

SELECT * FROM EMP
WHERE DEPTNO =10
UNION
SELECT * FROM EMP
WHERE DEPTNO =20;

--29번
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
WHERE DEPTNO =10
UNION
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
WHERE DEPTNO =20;

--30번 : 상응하는 데이터 타입이 달라서 오류가 생긴다
--SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
--WHERE DEPTNO =10
--UNION
--SELECT ENAME, EMPNO, DEPTNO, SAL FROM EMP
--WHERE DEPTNO =20;

--31번 데이터 타입이 같으면 출력 가능 
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
WHERE DEPTNO =10
UNION
SELECT SAL, JOB, DEPTNO, SAL FROM EMP
WHERE DEPTNO =20;

--32번 10번 부서 사원들의 사원번호, 이름, 봉급, 부서번호
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
WHERE DEPTNO =10
UNION
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
WHERE DEPTNO =10;

--33번 10번 부서 사원들의 사원번호, 이름, 봉급, 부서번호 두번씩 입력
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
WHERE DEPTNO =10
UNION ALL -- 중복되는 사람도 거르지 않고 그대로 나옴 
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
WHERE DEPTNO =10;

--34번 전체 부서에서 10번 부서 사람들만 빼기
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
MINUS
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
WHERE DEPTNO =10
ORDER BY DEPTNO; -- ORDER BY : 정렬기능

--35번 전체 부서에서 10번 부서와 공통인 사람 (교집합)
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
INTERSECT
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
WHERE DEPTNO =10;

--36번 이름에 두번째 글자가 n인 사람
SELECT * FROM EMP
WHERE ENAME LIKE '_L%'; 
  --_ : 앞에 문자 갯수를 표현

--5장 1번
SELECT * FROM EMP
Where ENAME LIKE '%S';

--5장 2번
SELECT * FROM EMP
Where DEPTNO = 30 and
      JOB = 'SALESMAN';
      
--5장 3번
SELECT * FROM EMP
Where DEPTNO in (20,30) AND
      SAL > 2000;

--
SELECT * FROM EMP
Where DEPTNO = 20 AND
      SAL > 2000
UNION
SELECT * FROM EMP
Where DEPTNO = 30 AND
      SAL > 2000;
      
--5장 4번
SELECT * FROM EMP
Where not(SAL >= 2000 And
      SAL <= 3000);
      
--5장 5번
SELECT ENAME, EMPNO, SAL, DEPTNO FROM EMP
WHERE ENAME like '%E%' AND
      NOT (SAL >= 1000 AND SAL <=2000) AND
      DEPTNO = 30;
      
--5장 6번
SELECT * FROM EMP
WHERE not ENAME Like('_L%')AND
      JOB in('CLERK','MANAGER')AND COMM is NULL;


6장
-- 1
SELECT SYSDATE FROM EMP;
SELECT SYSDATE +1 FROM DUAL; -- DUAL: 더미(내용을 한번만 쓰고 싶을때 사용)

--2 사원명과 이름을 대문자로 바꾼것
SELECT ENAME, UPPER(ENAME), LOWER(ENAME), INITCAP(ENAME) 
FROM EMP;

--3 이름이 scott인 사람
SELECT * FROM EMP
WHERE UPPER(ENAME) = UPPER('scott');

--4 이름에 scott이 든 사람
SELECT * FROM EMP
WHERE UPPER(ENAME) LIKE UPPER('%scott%');

--5 이름과 이름의 길이를 출력
SELECT ENAME, LENGTH(ENAME)
FROM EMP;

--6 이름과 이름의 길이(5자 이상)를 출력
SELECT ENAME, LENGTH(ENAME)
FROM EMP
WHERE LENGTH(ENAME)>=5;

--7 본인 이름 글자 수와 바이트 수
SELECT LENGTH('주디'), LENGTHB('주디')
FROM DUAL;

--8 JOB , JOB 첫자부터 두글자, 셋째 글자부터 2글자, 5번째 글자부터 끝까지
SELECT JOB, SUBSTR(JOB,1,2), SUBSTR('JOB',3,2), SUBSTR('JOB',5)
FROM EMP;

--9 INSTR 함수로 문자열 데이터에서 특정 문자열 찾기
SELECT INSTRB('HELLO, ORACLE!','L') AS INSTR_1,
       INSTRB('HELLO, ORACLE!','L',5) AS INSTR_2, 
       INSTRB('HELLO, ORACLE!','L',2, 2) AS INSTR_3
FROM DUAL;

--10 INSTR 함수로 사원 이름에 문자 S가 있는 행 구하기
SELECT *
  FROM EMP
 WHERE INSTR(ENAME, 'S') > 0;
 
--11 LIKE 연산자로 사원 이름에 문자 S가 있는 행 구하기
SELECT *
  FROM EMP
 WHERE ENAME LIKE '%S%';
 
--12 REPLACE 함수로 문자열 안에 있는 특정 문자 바꾸기
SELECT '010-1234-5678' AS REPLACE_BEFORE,
       REPLACE('010-1234-5678', '-', ' ') AS REPLACE_1,
       REPLACE('010-1234-5678', '-') AS REPLACE_2
  FROM DUAL;

--13 LAPD, RPAD 함수 사용하여 출력하기
SELECT 'Oracle',
       LPAD('Oracle', 10, '#') AS LPAD_1,
       RPAD('Oracle', 10, '*') AS RPAD_1,
       LPAD('Oracle', 10) AS LPAD_2,
       RPAD('Oracle', 10) AS RPAD_2
  FROM DUAL;
  
--14 RPAD 함수를 사용하여 개인정보 뒷자리 *표시로 출력하기
SELECT RPAD('971225-', 14, '*') AS RPAD_JMNO,
       RPAD('010-1234-', 13, '*') AS RPAD_PHONE
  FROM DUAL;

--15 두 열 사이에 콜론(:) 넣고 연결하기
SELECT CONCAT(EMPNO, ENAME),
       CONCAT(EMPNO, CONCAT(' : ', ENAME))
  FROM EMP
 WHERE ENAME = 'SCOTT';

--16 TRIM 함수로 공백 제거하여 출력하기
SELECT '[' || TRIM(' _ _Oracle_ _ ') || ']' AS TRIM,
       '[' || TRIM(LEADING FROM ' _ _Oracle_ _ ') || ']' AS TRIM_LEADING,
       '[' || TRIM(TRAILING FROM ' _ _Oracle_ _ ') || ']' AS TRIM_TRAILING,
       '[' || TRIM(BOTH FROM ' _ _Oracle_ _ ') || ']' AS TRIM_BOTH
  FROM DUAL;
  
--17 TRIM 함수로 삭제할 문자_ 삭제 후 출력하기
SELECT '[' || TRIM('_' FROM '_ _Oracle_ _') || ']' AS TRIM,
       '[' || TRIM(LEADING '_' FROM '_ _Oracle_ _') || ']' AS TRIM_LEADING,
       '[' || TRIM(TRAILING '_' FROM '_ _Oracle_ _') || ']' AS TRIM_TRAILING,
       '[' || TRIM(BOTH '_' FROM '_ _Oracle_ _') || ']' AS TRIM_BOTH
  FROM DUAL;

--18 TRIM, LTRIM, RTRIM 사용하여 문자열 출력하기
SELECT '[' || TRIM(' _Oracle_ ') || ']' AS TRIM,
       '[' || LTRIM(' _Oracle_ ') || ']' AS LTRIM,
       '[' || LTRIM('<_Oracle_>', '_<') || ']' AS LTRIM_2,
       '[' || RTRIM(' _Oracle_ ') || ']' AS RTRIM,
       '[' || RTRIM('<_Oracle_>', '>_') || ']' AS RTRIM_2
  FROM DUAL;

--19 ROUND 함수를 사용하여 반올림된 숫자 출력하기
SELECT ROUND(1234.5678) AS ROUND,
       ROUND(1234.5678, 0) AS ROUND_0,
       ROUND(1234.5678, 1) AS ROUND_1,
       ROUND(1234.5678, 2) AS ROUND_2,
       ROUND(1234.5678, -1) AS ROUND_MINUS1,
       ROUND(1234.5678, -2) AS ROUND_MINUS2
  FROM DUAL;

--20 TRUNC 함수를 사용하여 숫자 출력하기
SELECT TRUNC(1234.5678) AS TRUNC,
       TRUNC(1234.5678, 0) AS TRUNC_0,
       TRUNC(1234.5678, 1) AS TRUNC_1,
       TRUNC(1234.5678, 2) AS TRUNC_2,
       TRUNC(1234.5678, -1) AS TRUNC_MINUS1,
       TRUNC(1234.5678, -2) AS TRUNC_MINUS2
  FROM DUAL;
  
--21 CEIL, FLOOR 함수로 숫자 출력
SELECT CEIL(3.14),
       FLOOR(3.14),
       CEIL(-3.14),
       FLOOR(-3.14)
  FROM DUAL;
  
--22 MOD 함수를 사용하여 나머지값 함수 출력하기 
SELECT MOD(15, 6),
       MOD(10, 2),
       MOD(11, 2)
  FROM DUAL;