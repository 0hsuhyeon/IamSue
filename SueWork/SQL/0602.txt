--1
SELECT * FROM EMP where SAL >=2000 AND SAL <=3000;
--2
SELECT SAL,COMM,SAL*12+NVL(COMM,0) AS "연 봉"
FROM EMP;

SELECT SAL,COMM, NVL2(COMM,SAL*12+COMM,SAL*12)AS "연 봉"
FROM EMP;

--특정 열 값이나 데이터 값에 따라 어떤 데이터를 반환할지 정할때 사용: DECODE, CASE
--3 DECODE문
SELECT EMPNO, ENAME, JOB, SAL,
DECODE(JOB,
          'MANAGER',SAL*1.1,
          'SALESMAN',SAL*1.05,
          'ANALYST',SAL,
          SAL*1.03) AS UPSAL
FROM EMP;

--4 CASE문
SELECT EMPNO, ENAME, JOB, SAL,
       CASE JOB
          WHEN 'MANAGER' THEN SAL*1.1
          WHEN 'SALESMAN' THEN SAL*1.05
          WHEN 'ANALYST' THEN SAL
          ELSE SAL*1.03
       END AS UPSAL
FROM EMP;

--5
SELECT EMPNO, ENAME, COMM,
       CASE
          WHEN COMM IS NULL THEN '해당사항 없음'
          WHEN COMM = 0 THEN '수당없음'
          WHEN COMM > 0 THEN '수당 : ' || COMM
       END AS COMM_TEXT
FROM EMP;


SELECT EMPNO, ENAME, COMM,
      CASE
        WHEN COMM is NULL THEN '해당사항 없음'
        WHEN COMM = 0 THEN '수당없음'
        WHEN COMM >0 THEN '수당 : ' ||COMM
      END AS COMM_TEXT
FROM EMP;

--문제1
--SUBSTR(속성 또는 문자열, 시작, 갯수) -- 문자열 일부분 추출
--RPAD(속성 또는 문자열,전체자리수,'채울 문자') -- 채우기 
--LENGTH( )--길이

SELECT EMPNO,
        RPAD(SUBSTR(EMPNO,1,2),4,'*')
        AS MASKING_EMPNO,
       ENAME,
        RPAD(SUBSTR(ENAME,1,1),LENGTH(ENAME),'*')
        AS MASKING_ENAME
FROM EMP 
WHERE LENGTH(ENAME)=5;


--문제2
SELECT EMPNO, ENAME, SAL,
      TRUNC(SAL/21.5,2) AS DAY_PAY,
      ROUND(SAL/21.5/8,1) AS TIME_PAY
FROM EMP;

--문제3
--ADD_MONTHS( , )
--NEXT_DAY( ,'월')
--TO_CHAR( ,'YYYY-MM-DD')
--NVL(COMM,'N/A')

SELECT EMPNO, ENAME, HIREDATE,
TO_CHAR(NEXT_DAY(ADD_MONTHS(HIREDATE,3),'월'),'YYYY-MM-DD') AS R_JOB,
NVL(TO_CHAR(COMM),'N/A') AS COMM -- 'N/A가 문자열이기 때문에 COMM을 문자열로 바꾼다
FROM EMP;


--문제4
SELECT EMPNO, ENAME, MGR,
      CASE
        WHEN MGR IS NULL THEN '0000'
        WHEN SUBSTR(MGR,1,2) = '78' THEN '8888'
        WHEN SUBSTR(MGR,1,2) = '77' THEN '7777'
        WHEN SUBSTR(MGR,1,2) = '76' THEN '6666'
        WHEN SUBSTR(MGR,1,2) = '75' THEN '5555'
        ELSE TO_CHAR(MGR)
      END AS CHG_MGR
FROM EMP;


--7-1
SELECT SUM(SAL),COUNT(SAL), MAX(SAL), MIN(SAL), AVG(SAL) FROM EMP;

--7-2 사원수
SELECT COUNT(*)
FROM EMP;

--7-3 부서의 수
SELECT * FROM DEPT;

--7-4 보너스 없는 사원의 수 
SELECT COUNT(*) 
FROM EMP
WHERE COMM IS NULL;

--7-5 10번 부서의 사원 수 
SELECT COUNT(*)
FROM EMP WHERE DEPTNO = 10;

--7-6 각 부서별 사원 수
SELECT DEPTNO, COUNT(*)
FROM EMP
GROUP BY DEPTNO
ORDER by DEPTNO;

--7-7 각 부서별 최고 봉급
SELECT DEPTNO, MAX(SAL)
FROM EMP
GROUP BY DEPTNO
ORDER by DEPTNO;

--7-8 각 부서별 최장기간 근무한 사람의 입사일
SELECT DEPTNO, min(HIREDATE)
FROM EMP
GROUP BY DEPTNO;

--7-9
SELECT DEPTNO
FROM EMP;

--7-10
SELECT DISTINCT DEPTNO
FROM EMP;

--7-11
SELECT SUM(SAL),SUM(ALL SAL), SUM(DISTINCT SAL) FROM EMP;


--7-12 입사일 중복제거하고 출력
SELECT DISTINCT HIREDATE
FROM EMP;

--7-13 30번 부서의 사원수
SELECT COUNT(*)
FROM EMP
WHERE DEPTNO = 30;

--7-14 10번 부서의 최고 봉급액
SELECT MAX(SAL)
FROM EMP
WHERE DEPTNO = 10;

--7-15 10번 부서의 최저봉급액
SELECT MIN(SAL)
FROM EMP
WHERE DEPTNO = 10;

--7-16 20번 부서의 최근 입사자의 입사일
SELECT MAX(HIREDATE)
FROM EMP
WHERE DEPTNO = 20;

--7-17 20번 부서의 최고 장기간 근무한 사람의 입사일
SELECT MIN(HIREDATE)
FROM EMP
WHERE DEPTNO = 20;

--7-18 30번 부서의 평균 봉급
SELECT AVG(SAL)
FROM EMP
WHERE DEPTNO = 30;

--7-19 30번 부서의 평균 봉급(중복제거)
SELECT AVG(DISTINCT SAL)
FROM EMP
WHERE DEPTNO = 30;

--7-20
SELECT ROUND(AVG(SAL)), '10' AS DEPTNO FROM EMP WHERE DEPTNO = 10
UNION ALL
SELECT ROUND(AVG(SAL)), '20' AS DEPTNO FROM EMP WHERE DEPTNO = 20
UNION ALL
SELECT ROUND(AVG(SAL)), '30' AS DEPTNO FROM EMP WHERE DEPTNO = 30;


--7-21 부서번호 직급별 평균 봉급
SELECT DEPTNO, JOB, AVG(SAL)
FROM EMP
GROUP BY DEPTNO, jOB
ORDER BY DEPTNO, jOB;

--7-22 부서와 직급별로 평균 봉급이 2000이상인 사원들의 부서번호, 직급, 평균 봉급, 부서번호, 직급 순으로 출력
SELECT DEPTNO, JOB, AVG(SAL)
FROM EMP
GROUP BY DEPTNO, jOB
HAVING AVG(SAL) >= 2000
ORDER BY DEPTNO, jOB;

--7-23 *****WHERE절에는 그룹함수를 사용할 수 없다
SELECT DEPTNO, JOB, AVG(SAL)
FROM EMP
GROUP BY DEPTNO, jOB
--WHERE AVG(SAL) >= 2000
ORDER BY DEPTNO, jOB;

--7-24 봉급이 3000이하인 사원들을 대상으로 부서, 직급별 평균 봉급이 2000이상
SELECT DEPTNO, JOB, AVG(SAL)
FROM EMP
WHERE SAL <=3000
GROUP BY DEPTNO, JOB
HAVING AVG(SAL) >=2000
ORDER BY DEPTNO, jOB;

--7-25 부서, 직급별사원수, 최대 봉급, 봉급 합계, 평균 봉급 출력
SELECT DEPTNO, JOB, COUNT(*), MAX(SAL), SUM(SAL), AVG(SAL)
FROM EMP
GROUP BY ROLLUP(DEPTNO, JOB) -- 한방향으로 나온다 ( 함수에 명시한 열에 한해 결과 출력, 그룹함수를 지정할 수 없다 )
ORDER BY DEPTNO, jOB;

--7-26 
SELECT DEPTNO, JOB, COUNT(*), MAX(SAL), SUM(SAL), AVG(SAL)
FROM EMP
GROUP BY CUBE(DEPTNO, JOB) -- 여러방향으로 나온다
ORDER BY DEPTNO, jOB;

--7-27
SELECT DEPTNO, JOB, COUNT(*)
FROM EMP
GROUP BY DEPTNO, ROLLUP(JOB);

--7-28
SELECT DEPTNO, JOB, COUNT(*)
FROM EMP
GROUP BY job, ROllup(DEPTNO);

--7-29
SELECT DEPTNO, JOB, COUNT(*)
FROM EMP
GROUP BY GROUPing sets(DEPTNO, JOB)
ORDER BY DEPTNO, jOB;

--7-30
SELECT DEPTNO, JOB, COUNT(*)
FROM EMP
GROUP BY ROllup(job, DEPTNO);

--7-31
SELECT DEPTNO, JOB, COUNT(*)
FROM EMP
GROUP BY GROUPING SETS(DEPTNO, JOB)
ORDER BY DEPTNO, jOB;

--7-32
SELECT DEPTNO, JOB, COUNT(*),MAX(SAL),SUM(SAL),AVG(SAL),
    GROUPING(DEPTNO), -- 그룹핑여부를 확인할 수 있는 것 : 그룹핑된것이 0, 안된것이 1
    GROUPING(JOB)
FROM EMP
GROUP BY CUBE(DEPTNO, JOB)
ORDER BY DEPTNO, jOB;

--7-33
SELECT DECODE(GROUPING(DEPTNO),1,'ALL_DEPT',DEPTNO) AS DEPTNO, 
      DECODE(GROUPING(JOB),1,'ALL_JOB',JOB) AS JOB,
      COUNT(*),MAX(SAL),SUM(SAL),AVG(SAL)
FROM EMP
GROUP BY CUBE(DEPTNO, JOB)
ORDER BY DEPTNO, jOB;